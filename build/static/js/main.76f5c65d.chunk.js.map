{"version":3,"sources":["components/DarkMode.tsx","components/Message.tsx","components/UserInput.tsx","Master.tsx","index.tsx"],"names":["DarkMode","props","Switch","state","Dark","window","matchMedia","matches","this","ChangeMode","addEventListener","e","to","document","documentElement","setAttribute","setState","className","ref","type","checked","onClick","readOnly","React","Component","Message","Comp","scrollIntoView","behavior","isBot","context","UserInput","Selector","Selected","defaultValue","onChange","value","disabled","AnswerList","map","Answer","idx","OnAnswer","Master","UserAnswerTurn","CurrentStep","MaxStep","Messages","Scores","a","fetch","Config","Endpoint","method","ServerResponse","json","TestInfo","Ment","Msg","push","content","concat","Questions","GetQuestion","body","JSON","stringify","QuestionNo","headers","Question","question","answer","console","log","UserAnswer","Result","answerResult","Finish","AnimalResult","ResultMessage","Name","Desc","style","height","bind","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.76f5c65d.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/DarkMode.css';\n\ninterface state {\n    Dark: boolean\n}\n\nclass DarkMode extends React.Component<any, state> {\n    Switch: HTMLInputElement | null = null;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            Dark: window.matchMedia('(prefers-color-scheme: dark)').matches\n        }\n    }\n\n    componentDidMount() {\n        this.ChangeMode(window.matchMedia('(prefers-color-scheme: dark)').matches);\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            this.ChangeMode(window.matchMedia('(prefers-color-scheme: dark)').matches);\n        })\n    }\n\n    ChangeMode(to: boolean) {\n        if (to) {\n            document.documentElement.setAttribute(\"data-theme\", \"dark\");\n        } else {\n            document.documentElement.setAttribute(\"data-theme\", \"light\");\n        }\n        this.setState({\n            Dark: to\n        })\n    }\n\n    render() {\n        return (\n            <label className=\"DarkModSwitch\">\n                <input ref={(e)=>{this.Switch = e}} type=\"checkbox\" checked={this.state.Dark} onClick={() => {this.ChangeMode(!this.state.Dark)}} readOnly/>\n                <span className=\"Slider round\"></span>\n            </label>\n        )\n    }\n\n}\n\nexport default DarkMode;","import React from 'react';\nimport '../css/Message.css';\n\ninterface props {\n    isBot: boolean,\n    context: string\n}\n\nclass Message extends React.Component<props, any> {\n    Comp: HTMLDivElement | null = null;\n    componentDidMount() {\n        // MountAnimation\n        // Focus\n        if (this.Comp) {\n            this.Comp.scrollIntoView({behavior: \"smooth\"});\n        }\n    }\n\n    render() {\n        return (\n            <div ref={(e)=>{this.Comp=e}} className=\"Message\">\n                <div className={(!this.props.isBot? \"Black \":\"\") + \"MsgBefore\"}></div>\n                <div className=\"Msg\">{this.props.context}</div>\n            </div>\n        )\n    }\n\n}\n\nexport default Message;","import React from 'react';\nimport '../css/Message.css';\n\ninterface props {\n    AnswerList: Array<string>,\n    OnAnswer: Function\n}\n\ninterface state {\n    Selected: string\n}\n\nclass UserInput extends React.Component<props, state> {\n\n    Selector: HTMLSelectElement|null = null;\n\n    constructor(props: props) {\n        super(props);\n        this.state = {\n            Selected: \"\"\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Message\">\n                <div className=\"MsgBefore Black\"></div>\n                <div className=\"Msg\">\n                    <select defaultValue=\"\" ref={(e)=>{this.Selector=e}} onChange={()=>{this.setState({ Selected: (this.Selector as HTMLSelectElement).value })}} >\n                        <option value=\"\" disabled>선택</option>\n                        {\n                            this.props.AnswerList.map((Answer, idx) => {\n                                return <option key={idx} value={Answer}>{Answer}</option>\n                            })\n                        }\n                    </select>\n                    <span className=\"UserSubmit\" onClick={()=>{this.props.OnAnswer(this.state.Selected);}}>제출</span>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default UserInput;","import React from 'react';\nimport DarkMode from './components/DarkMode';\nimport Message from './components/Message';\nimport UserInput from './components/UserInput';\n\nimport Data from './Data.json';\nimport Config from './Config.json';\n\ninterface state {\n    UserAnswerTurn: boolean,\n    CurrentStep: number,\n    MaxStep: number,\n    Messages: Array<MessageT>,\n    AnswerList: Array<string>,\n    Scores: Array<string>\n}\n\ninterface MessageT {\n    content: string,\n    isBot: boolean\n}\n\nclass Master extends React.Component<any, state> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            UserAnswerTurn: true,\n            CurrentStep: 0,\n            MaxStep: 0,\n            Messages: [],\n            AnswerList: [],\n            Scores: []\n        }\n    }\n\n    async componentDidMount() {\n        const ServerResponse = await fetch(`${Config.Endpoint}/GetTestInfo`, {\n            method: \"POST\"\n        });\n        const TestInfo: {Name: string, Questions: number, Ment: Array<string>} = await ServerResponse.json();\n        let Messages: Array<MessageT> = [];\n\n        for (const Msg of TestInfo.Ment) {\n            Messages.push({\n                content: Msg,\n                isBot: true\n            })\n        }\n\n        this.setState({\n            Messages: this.state.Messages.concat(Messages),\n            MaxStep: TestInfo.Questions-1\n        }, () => {\n            this.GetQuestion();\n        })\n    }\n\n    async GetQuestion() {\n        const ServerResponse = await fetch(`${Config.Endpoint}/GetQuestion`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                QuestionNo: this.state.CurrentStep\n            }),\n            headers: {'content-type':'application/json'}\n        })\n        const Question: {question?: string, answer?: Array<string>, err?: string} = await ServerResponse.json();\n        if (Question.question && Question.answer) {\n            this.setState({\n                UserAnswerTurn: true,\n                Messages: this.state.Messages.concat({content: Question.question, isBot: true}),\n                AnswerList: Question.answer\n            }, );\n        }\n        console.log(Question);\n    }\n\n    async UserAnswer(answer: string) {\n        if (answer != \"\") {\n            this.setState({UserAnswerTurn: false});\n            const ServerResponse = await fetch(`${Config.Endpoint}/Answer`, {\n                method: \"POST\",\n                body: JSON.stringify({\n                    QuestionNo: this.state.CurrentStep,\n                    UserAnswer: answer\n                }),\n                headers: {'content-type':'application/json'}\n            })\n            const Result: {answerResult?: Array<string>, err?: string} = await ServerResponse.json();\n            if (Result.answerResult) {\n                this.setState({\n                    CurrentStep: this.state.CurrentStep+1,\n                    Messages: this.state.Messages.concat({content: answer, isBot: false}),\n                    Scores: this.state.Scores.concat(Result.answerResult)\n                }, () => {\n                    if (this.state.MaxStep < this.state.CurrentStep)\n                        this.Finish();\n                    else\n                        this.GetQuestion();\n                })\n            }\n        }\n    }\n\n    async Finish() {\n        const ServerResponse = await fetch(`${Config.Endpoint}/GetResult`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                Scores: this.state.Scores\n            }),\n            headers: {'content-type': 'application/json'}\n        });\n        const AnimalResult: {Name: string, Desc: string} = await ServerResponse.json();\n\n        const ResultMessage: Array<MessageT> = [\n            {\n                content: `축하합니다! 결과는 다음과 같습니다. ${AnimalResult.Name}!`,\n                isBot: true\n            },\n            {\n                content: AnimalResult.Desc,\n                isBot: true\n            }\n        ]\n        \n        this.setState({\n            Messages: this.state.Messages.concat(ResultMessage)\n        })\n    }\n    \n    render() {\n        return (\n            <div style={{height: \"100%\"}}>\n                <header>\n                    <span className=\"Title\">Swift</span>\n                    <span></span>\n                    <DarkMode />\n                </header>\n                <div className=\"ChatBox\">\n                    {\n                        this.state.Messages.map((question, idx) => {\n                            return <Message key={idx} isBot={question.isBot} context={question.content} />\n                        })\n                    }\n                    {this.state.UserAnswerTurn&& <UserInput OnAnswer={this.UserAnswer.bind(this)} AnswerList={this.state.AnswerList} />}\n                </div>\n\n            </div>\n        )\n    }\n\n}\n\nexport default Master;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Master from './Master';\n\nReactDOM.render(\n  <Master />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}